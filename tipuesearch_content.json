{"pages":[{"url":"http://trungdong.github.io/prov-python-short-tutorial.html","text":"Documentation is hard work! I started the work on the PROV Python package nearly three years ago and yet its documentation is still quite lacking. As a small effort to make up for it, I thought a simple tutorial might help a bit. So here it is: the first tutorial for PROV Python ! It will guide you through: Installing the Prov package Creating a PROV document in Python Exporting the document into PROV-N and PROV-JSON Displaying the document in a graphical format like the one on the right Saving a provenance document in the cloud at ProvStore and retrieve it back All the above can be done in 10-15 minutes! I hope you find the tutorial useful. Any suggestion or request, please do let me know here . PNG export of a simple example from the book Provenance: An Introduction to PROV Updated 27-Feb-2015 : I added a simple instruction in the tutorial showing how to read (i.e. deserialise) a PROV-JSON file into a ProvDocument instance. In addition, I simplified the section on interacting with ProvStore by using Sam Millar 's provstore-api package.","tags":"Provenance","title":"A Short Tutorial for Prov Python"},{"url":"http://trungdong.github.io/prov-n-javascript-editor.html","text":"After showing the TextMate PROV-N bundle to my colleagues, one pointed to me the powerful Ace code editor , which comes with tools to facilitate adding a new syntax. I found it even easier to work with compared to TextMate's bundle editor. After a day, I managed to port the PROV-N syntax rules to Ace and added some more. This is the result. Try the new PROV-N editor on our Southampton Provenance website and let me know what you think.","tags":"Provenance","title":"PROV-N Javascript Editor"},{"url":"http://trungdong.github.io/prov-n-textmate.html","text":"The Provenance Notation ( PROV-N ) has been my chosen representation when it comes to writing provenance. It has a relatively low cognitive cost and easier for humans to read (at least to me), compared to other provenance representations. Even so, I usually found myself making mundane mistakes and typos and have had to repetitively rely on the Provenance Validator to check my provenance for syntactical errors. Hence the motivation to find a tool to help write provenance faster with less mistakes. Here comes TextMate ! TextMate is a powerful text editor on Mac (which I have only used it lightly, on and off). It provides support for numerous text file formats thanks to the flexible extensibility it offers. Having discovered how to define a new language in TextMate, I set off trying to find a way to alleviate my pains with PROV-N authoring right away. To cut the story short, here is the results. If you like what you see, grab the PROV-N TextMate bundle from my github repository . An installation of TextMate, of course, is required. In addition to the PROV-N syntax highlighting, another bonus provided by the bundle is the tab-triggered snippets for all PROV-N statements. For example, you can just type wd⇥ ( ⇥ is the tab key) to get wasDerivedFrom(, , -, -, -, []) . The list of all snippets is on the right (or look them up in the Bundles > Provenance Notation menu in TextMate). Please note though that the PROV attributes snippets are available only between the square brackets (i.e. the attributes block) in a statement. Disclaimer: The bundle is my very first attempt and there are many issues remained. Please don't expect it supports all possible valid PROV-N statements. If you are working with PROV-N, I hope you will find this TextMate bundle useful. Contributions and suggestions are very welcome. For Sublime Text users : You can install the PROV-N language grammar in Sublime Text to get the same syntax highlighting as shown above. To do this, download and copy the file to the User package folder (Menu: Preferences > Browse Packages...) Update : A JavaScript code editor supporting the PROV-N syntax is now available. See this post .","tags":"Provenance","title":"TextMate Bundle for PROV-N"}]}