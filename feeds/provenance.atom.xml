<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dong Huynh</title><link href="http://trungdong.github.io/" rel="alternate"></link><link href="http://trungdong.github.io/feeds/provenance.atom.xml" rel="self"></link><id>http://trungdong.github.io/</id><updated>2014-08-07T23:42:26+01:00</updated><entry><title>A Short Tutorial for Prov Python</title><link href="http://trungdong.github.io/prov-python-short-tutorial.html" rel="alternate"></link><updated>2014-08-07T23:42:26+01:00</updated><author><name>Dong Huynh</name></author><id>tag:trungdong.github.io,2014-08-07:prov-python-short-tutorial.html</id><summary type="html">&lt;p&gt;Documentation is hard work! I started the work on the &lt;a href="https://pypi.python.org/pypi/prov/"&gt;PROV Python package&lt;/a&gt; nearly &lt;a href="https://github.com/trungdong/prov/graphs/contributors"&gt;three years ago&lt;/a&gt; and yet its &lt;a href="http://prov.readthedocs.org/"&gt;documentation&lt;/a&gt; is still quite lacking. As a small effort to make up for it, I thought a simple tutorial might help a bit.  &lt;/p&gt;
&lt;p&gt;So here it is: &lt;a href="http://nbviewer.ipython.org/github/trungdong/notebooks/blob/master/PROV%20Tutorial.ipynb"&gt;the first tutorial for PROV Python&lt;/a&gt;!  &lt;/p&gt;
&lt;p&gt;It will guide you through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Installing the Prov package&lt;/li&gt;
&lt;li&gt;Creating a PROV document in Python&lt;/li&gt;
&lt;li&gt;Exporting the document into &lt;a href="http://www.w3.org/TR/prov-n/"&gt;PROV-N&lt;/a&gt; and &lt;a href="http://www.w3.org/Submission/2013/SUBM-prov-json-20130424/"&gt;PROV-JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Displaying the document in a graphical format like the one on the right&lt;/li&gt;
&lt;li&gt;Saving a provenance document in the cloud at &lt;a href="https://provenance.ecs.soton.ac.uk/store/"&gt;ProvStore&lt;/a&gt; and retrieve it back&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the above can be done in 10-15 minutes!  &lt;/p&gt;
&lt;p&gt;I hope you find &lt;a href="http://nbviewer.ipython.org/github/trungdong/notebooks/blob/master/PROV%20Tutorial.ipynb"&gt;the tutorial&lt;/a&gt; useful. Any suggestion or request, please do &lt;a href="https://github.com/trungdong/notebooks/issues"&gt;let me know here&lt;/a&gt;.&lt;a href="https://www.blogger.com/"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="PROV-N JavaScript Editor Screenshot" src="http://trungdong.github.io/images/provbook-example.png" /&gt;&lt;/p&gt;
&lt;p&gt;PNG export of a simple example from the book &lt;a href="http://www.provbook.org/"&gt;Provenance: An Introduction to PROV&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Updated 27-Feb-2015&lt;/em&gt;: I added a simple instruction in the tutorial showing how to read (i.e. deserialise) a PROV-JSON file into a ProvDocument instance. In addition, I simplified the section on interacting with &lt;a href="https://provenance.ecs.soton.ac.uk/store/"&gt;ProvStore&lt;/a&gt; by using &lt;a href="http://millar.io/"&gt;Sam Millar&lt;/a&gt;'s &lt;a href="https://github.com/millar/provstore-api"&gt;provstore-api&lt;/a&gt; package.&lt;/p&gt;</summary><category term="PROV-JSON"></category><category term="PROV-N"></category><category term="ProvPy"></category><category term="ProvStore"></category><category term="Python"></category><category term="tutorial"></category></entry><entry><title>PROV-N Javascript Editor</title><link href="http://trungdong.github.io/prov-n-javascript-editor.html" rel="alternate"></link><updated>2014-03-21T10:31:59+00:00</updated><author><name>Dong Huynh</name></author><id>tag:trungdong.github.io,2014-03-21:prov-n-javascript-editor.html</id><summary type="html">&lt;p&gt;After showing the &lt;a href="http://trungdong.github.io/prov-n-textmate.html"&gt;TextMate PROV-N bundle&lt;/a&gt; to my colleagues, one pointed to me the powerful &lt;a href="http://ace.c9.io/"&gt;Ace code editor&lt;/a&gt;, which comes with tools to facilitate adding a new syntax. I found it even easier to work with compared to TextMate's bundle editor. After a day, I managed to port the PROV-N syntax rules to Ace and added some more. This is the result.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="PROV-N JavaScript Editor Screenshot" src="http://trungdong.github.io/images/prov-n-js-editor.png" /&gt;&lt;/p&gt;
&lt;p&gt;Try the new &lt;a href="https://provenance.ecs.soton.ac.uk/tools/editor/"&gt;PROV-N editor&lt;/a&gt; on our &lt;a href="https://provenance.ecs.soton.ac.uk/"&gt;Southampton Provenance website&lt;/a&gt; and let me know what you think.&lt;/p&gt;</summary><category term="editor"></category><category term="JavaScript"></category><category term="PROV-N"></category><category term="provenance"></category><category term="syntax highlighting"></category></entry><entry><title>TextMate Bundle for PROV-N</title><link href="http://trungdong.github.io/prov-n-textmate.html" rel="alternate"></link><updated>2014-03-19T01:11:00+00:00</updated><author><name>Dong Huynh</name></author><id>tag:trungdong.github.io,2014-03-19:prov-n-textmate.html</id><summary type="html">&lt;p&gt;The Provenance Notation (&lt;a href="http://www.w3.org/TR/prov-n/"&gt;PROV-N&lt;/a&gt;) has been my chosen representation when it comes to writing provenance. It has a relatively low cognitive cost and easier for humans to read (at least to me), compared to other provenance representations. Even so, I usually found myself making mundane mistakes and typos and have had to repetitively rely on the &lt;a href="https://provenance.ecs.soton.ac.uk/validator/"&gt;Provenance Validator&lt;/a&gt; to check my provenance for syntactical errors. Hence the motivation to find a tool to help write provenance faster with less mistakes.  &lt;/p&gt;
&lt;p&gt;Here comes &lt;a href="http://macromates.com/"&gt;TextMate&lt;/a&gt;!  &lt;/p&gt;
&lt;p&gt;TextMate is a powerful text editor on Mac (which I have only used it lightly, on and off). It provides support for numerous text file formats thanks to the flexible extensibility it offers. Having discovered how to &lt;a href="http://manual.macromates.com/en/language_grammars"&gt;define a new language&lt;/a&gt; in TextMate, I set off trying to find a way to alleviate my pains with PROV-N authoring right away. To cut the story short, here is the results.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of TextMate with PROV-N syntax highlighting" src="http://trungdong.github.io/images/textmate-prov-n-screenshot.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://trungdong.github.io/images/textmate-prov-n-snippets.png" alt="PROV-N Snippets" class="right" title="PROV-N Snippets"&gt;&lt;/p&gt;
&lt;p&gt;If you like what you see, grab the PROV-N TextMate bundle from my &lt;a href="https://github.com/trungdong/provn-textmate"&gt;github repository&lt;/a&gt;. An installation of TextMate, of course, is required.  &lt;/p&gt;
&lt;p&gt;In addition to the PROV-N syntax highlighting, another bonus provided by the bundle is the &lt;a href="http://manual.macromates.com/en/bundles#tab_triggers"&gt;tab-triggered snippets&lt;/a&gt; for all PROV-N statements. For example, you can just type &lt;span style="font-family: Courier New, Courier, monospace;"&gt;wd⇥&lt;/span&gt; (&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;⇥&lt;/span&gt; is the tab key) to get &lt;span style="font-family: Courier New, Courier, monospace;"&gt;wasDerivedFrom(, , -, -, -, [])&lt;/span&gt;. The list of all snippets is on the right (or look them up in the Bundles &amp;gt; Provenance Notation menu in TextMate). Please note though that the PROV attributes snippets are available only between the square brackets (i.e. the attributes block) in a statement.  &lt;/p&gt;
&lt;p&gt;Disclaimer: The bundle is my very first attempt and there are many issues remained. Please don't expect it supports all possible valid PROV-N statements.  &lt;/p&gt;
&lt;p&gt;If you are working with PROV-N, I hope you will find this TextMate bundle useful. Contributions and suggestions are very welcome.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For Sublime Text users&lt;/strong&gt;: You can install the &lt;a href="https://raw.github.com/trungdong/provn-textmate/master/prov-n.tmbundle/Syntaxes/provn.tmLanguage"&gt;PROV-N language grammar&lt;/a&gt; in Sublime Text to get the same syntax highlighting as shown above. To do this, download and copy the file to the User package folder (Menu: Preferences &amp;gt; Browse Packages...)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: A JavaScript code editor supporting the PROV-N syntax is now available. See &lt;a href="http://trungdong.github.io/prov-n-javascript-editor.html"&gt;this post&lt;/a&gt;.&lt;/p&gt;</summary><category term="PROV-N"></category><category term="provenance"></category><category term="syntax highlighting"></category><category term="TextMate"></category></entry></feed>